name: 构建
run-name: "Nightly Build 夜间构建 ${{ formatDate(utcNow(), 'MM-DD') }}"

on:
  schedule:
    - cron: "0 16 * * *"
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
 
jobs:
  builder_matrix:
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86, x64, arm64 ]
        os: [ ubuntu-latest, windows-latest, macos-13, macos-14 ]
        exclude:
          - os: ubuntu-latest
            arch: x86
          - os: ubuntu-latest
            arch: arm64
          - os: macos-13
            arch: x86
          - os: macos-13
            arch: arm64
          - os: windows-latest
            arch: arm64
          - os: macos-14
            arch: x86
          - os: macos-14
            arch: x64
          - os: windows-latest
            arch: x86
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check for new commits today
        id: check-new-commits
        uses: adriangl/check-new-commits-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          seconds: 86400 # One day in seconds
          branch: 'main'
      - name: Decide to stop
        if: ${{ steps.check-new-commits.outputs.has-new-commits != 'true' && github.event_name != 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "::warning title=Stop Workflow::No new commit today."
          stopMarker=$(uuidgen)
          echo "::stop-commands::$stopMarker"
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Setup Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.8.10'
          architecture: ${{ matrix.arch }}
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Init zip folder
        run: mkdir zip

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Build (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        uses: Nuitka/Nuitka-Action@main
        with:
          mode: standalone
          script-name: main.py
          output-file: ClassWidgets
          enable-plugins: pyqt5
          include-data-files: LICENSE=LICENSE
          include-data-dir: |
            audio=audio
            config=config
            font=font
            img=img
            plugins=plugins
            ui=ui
            view=view
          include-package: |
            pyttsx3.drivers
            comtypes
          disable-console: true
          product-name: Class Widgets
          file-version: 1.1.7.1
          windows-icon-from-ico: ./img/favicon.ico
      - name: Build (Linux)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        uses: Nuitka/Nuitka-Action@main
        with:
          mode: standalone
          script-name: main.py
          output-file: ClassWidgets
          enable-plugins: pyqt5
          include-data-files: LICENSE=LICENSE
          include-data-dir: |
            audio=audio
            config=config
            font=font
            img=img
            plugins=plugins
            ui=ui
            view=view
          include-package: pyttsx3.drivers
          linux-icon: ./img/favicon.ico
      - name: Build (macOS)
        if: ${{ startsWith(matrix.os, 'macos') }}
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: main.py
          enable-plugins: pyqt5
          output-file: ClassWidgets
          include-data-files: LICENSE=LICENSE
          include-data-dir: |
            audio=audio
            config=config
            font=font
            img=img
            plugins=plugins
            ui=ui
            view=view
          include-package: pyttsx3.drivers
          macos-app-icon: ./img/favicon.icns
          macos-signed-app-name: cn.rinlit.classwidgets
          macos-app-name: Class Widgets
          macos-app-version: 1.1.7.1


      - name: Package (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          curl -o zip.exe -L http://www.stahlworks.com/dev/zip.exe
          xcopy build\main.dist\* ClassWidgets\ /e/y
          ./zip -r -q "./zip/ClassWidgets-Windows-${{ matrix.arch }} (Unsigned).zip" ClassWidgets

      - name: Package (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          cp -R build/main.dist ClassWidgets
          zip -r -q ./zip/ClassWidgets-UbuntuLatest.zip ClassWidgets

      - name: Package (macOS)
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          cp -R build/main.app Class\ Widgets.app
          zip -r -q "./zip/Class Widgets-macOS-${{ matrix.arch }}.zip" Class\ Widgets.app

      - name: Upload unsigned application
        if: ${{ ( matrix.os != 'windows-latest' && github.event_name != 'pull_request' ) || github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4.4.2
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: ./zip
      - name: Upload unsigned single file
        if: ${{ matrix.os == 'windows-latest' && github.event_name != 'pull_request' }}
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4.4.2
        with:
          name: windows-${{ matrix.arch }} (Unsigned single)
          path: ./ClassWidgets/ClassWidgets.exe
      - name: Sign application (Test)
        if: ${{ matrix.os == 'windows-latest' && github.event_name != 'pull_request' && 0 == 1}}
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: '2e13633d-4e7d-4462-9091-27536751c84c'
          project-slug: 'Class-Widgets.git'
          signing-policy-slug: 'test-signing'
          github-artifact-id: '${{ steps.upload-unsigned-artifact.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: '.\ClassWidgets'
      - name: Sign application (Release)
        if: ${{ matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/') }}
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: '2e13633d-4e7d-4462-9091-27536751c84c'
          project-slug: 'Class-Widgets.git'
          signing-policy-slug: 'release-signing'
          github-artifact-id: '${{ steps.upload-unsigned-artifact.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: '.\ClassWidgets'
      - name: Recompress
        if: ${{ matrix.os == 'windows-latest' && github.event_name != 'pull_request' }}
        run: |
          del "zip/ClassWidgets-Windows-${{ matrix.arch }} (Unsigned).zip"
          ./zip -r -q zip/ClassWidgets-Windows-${{ matrix.arch }}.zip ClassWidgets
      - name: Upload signed application
        if: ${{ matrix.os == 'windows-latest' && github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4.4.2
        with:
          name: windows-latest-${{ matrix.arch }}
          path: ./zip

  debian:
    runs-on: ubuntu-latest
    container:
      image: debian:10
    steps:
      - name: Install dependencies
        shell: bash
        run: |
          apt-get update
          apt-get install -y ccache gcc wget zip binutils libglib2.0-dev libfreetype6 libxfixes3 libgssapi-krb5-2 libdbus-1-3 libxext6 libfontconfig1 libxrandr2 libnspr4 libx11-xcb1 libxrender1 libasound2 libxkbcommon0 libxtst6 libnss3 libxdamage1 libxcomposite1 libcups2 libwayland-client0 libwayland-cursor0 libcairo2 libcairo-gobject2 libpango-1.0-0 libgtk-3-0 libgdk-pixbuf2.0-0 libxkbcommon-x11-0 libwayland-egl1 libxcb-xinerama0 libxcb-render-util0 libxcb-randr0 libxcb-image0 libxcb-sync1 libxcb-keysyms1 libxcb-shape0 libxcb-xfixes0 libxcb-icccm4 libxcb-glx0 git patchelf
          wget http://ftp.debian.org/debian/pool/main/x/xcb-util/libxcb-util1_0.4.0-1+b1_amd64.deb
          dpkg -i libxcb-util1_0.4.0-1+b1_amd64.deb
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Setup uv & python
        uses: astral-sh/setup-uv@v4
        with:
          python-version: 3.8.10
      - name: Setup Environment Variables
        shell: bash
        run: |
          echo "NUITKA_CACHE_DIR=${{ github.action_path }}/nuitka/cache" >> $GITHUB_ENV
          echo "PYTHON_VERSION=3.8" >> $GITHUB_ENV
      - name: Cache Nuitka cache directory
        if: ${{ !inputs.disable-cache }}
        uses: actions/cache@v4
        with:
          path: ${{ env.NUITKA_CACHE_DIR }}
          key: Debian-X64-python-${{ env.PYTHON_VERSION }}-nuitka-${{ github.sha }}
          restore-keys: |
            Debian-X64-python-${{ env.PYTHON_VERSION }}-
            Debian-X64-python-
            Debian-X64-
      - name: Build
        shell: bash
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install nuitka
          python -m nuitka main.py \
            --enable-plugin=pyqt5 \
            --mode=standalone \
            -o"ClassWidgets" \
            --include-data-dir=img=img \
            --include-data-dir=ui=ui \
            --include-data-dir=view=view \
            --include-data-dir=config=config \
            --include-data-dir=plugins=plugins \
            --include-data-dir=font=font \
            --include-data-dir=audio=audio \
            --include-data-files=LICENSE=LICENSE \
            --include-package=pyttsx3.drivers

      - name: Package (Debian)
        run: |
          cp -R main.dist ClassWidgets
          mkdir zip
          zip -r -q zip/ClassWidgets-Debian10.zip ClassWidgets

      - name: Upload
        uses: actions/upload-artifact@v4.4.2
        with:
          name: debian10-x64
          path: ./zip

  release:
    needs: [debian, builder_matrix]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    uses: ./.github/workflows/release.yml
    with:
      runid: ${{ github.run_id }}
